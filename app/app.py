import gradio as gr
import webbrowser, os
import time
import plotly.express as px
# from processing import *

filepath="./files/"

light_theme = gr.themes.Monochrome(
    primary_hue="red",
    secondary_hue="amber",
    text_size="lg",
    spacing_size="lg",
    font=[gr.themes.GoogleFont('JetBrains Mono'), gr.themes.GoogleFont('Limelight'), 'system-ui', 'sans-serif'],
).set(
    block_radius='*radius_xxl',
    button_large_radius='*radius_xl',
    button_large_text_size='*text_md',
    button_small_radius='*radius_xl',
)

dark_theme = gr.themes.Monochrome(
    primary_hue="lime",
    secondary_hue="blue",
    text_size="lg",
    spacing_size="lg",
    font=[gr.themes.GoogleFont('Inter'), gr.themes.GoogleFont('Limelight'), 'system-ui', 'sans-serif'],
    neutral_hue="gray",
).set(
    block_radius='*radius_xxl',
    button_large_radius='*radius_xl',
    button_large_text_size='*text_md',
    button_small_radius='*radius_xl',
)

def warning_file():
    gr.Warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!")

def info_fn():
    gr.Info("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg, jpeg, png")

def info_req():
    # startup_conf()
    gr.Info("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    
def info_res():
    gr.Info("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")

def photoProcessing(file, ):
    time.sleep(1)
    print(file)
    if file is not None:
        info_req()
        # sign_detection(file, './files/detection.jpg')
        # number, probability = sign_recognition('./files/detection.jpg', 'recognition.jpg')
        # string = f'–ù–æ–º–µ—Ä: {number}\n\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR-–º–æ–¥–µ–ª–∏: {probability:.2f}%'
        info_res()
        return './files/bot_deer_2.jpg', './files/bot_deer_2.jpg', '–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã'
        # return './files/detection.jpg', './files/cropped_image_recognition.jpg', string
    else:
        warning_file()
        return None, None, None

custom_css = """
#theme-toggle {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 1000;
}
"""

toggle_theme_js = """
function toggleTheme() {
    const themeToggle = document.getElementById('theme-toggle');
    const isDarkMode = document.body.classList.contains('dark');
    
    if (isDarkMode) {
        document.body.classList.remove('dark');
        document.body.classList.add('light');
        themeToggle.textContent = '‚òæ';
    } else {
        document.body.classList.remove('light');
        document.body.classList.add('dark');
        themeToggle.textContent = '‚òÄ';
    }
}
"""

def fileOpen():
    webbrowser.open(os.path.realpath(filepath))
   
output = [gr.Dataframe(row_count = (4, "dynamic"), col_count=(4, "fixed"), label="Predictions")]

with gr.Blocks(theme=light_theme, css=custom_css) as demo:
    gr.HTML(
        """
        <button id="theme-toggle" onclick="toggleTheme()">üåô</button>
        <script>
        """ + toggle_theme_js + """
        </script>
        """
    )
    gr.Markdown("""<a name="readme-top"></a>
                    <h1 style="text-align:center;line-height: 0.3;" ><font size="30px"><strong style="font-family: Limelight">SAFE-MACS</strong></font></h1>
                    <p style="text-align:center;color:#de2c00;line-height: 0.1;font-weight: bold;">Safety Automated Medical Control System</p>
                    <p align="center"><font size="4px">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—è<br>–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞<br></font></p>
                    <p align="center"></p>""")

    with gr.Row():
        with gr.Column():
            with gr.Tab('–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'):
                file_photo = gr.File(label="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", file_types=['.png','.jpeg','.jpg'])
                with gr.Column():
                    with gr.Row():
                        btn_photo = gr.Button(value="–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ",)
                        triggerImage = gr.Button(value="–ü–æ–¥—Ä–æ–±–Ω–µ–µ",)
                with gr.Row():
                        with gr.Row('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'):
                            with gr.Column():
                                predictImage = gr.Image(type="pil", label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
                                cropImage = gr.Image(type="pil", label="–û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç")
                            with gr.Column():
                                gr.Markdown("""<p align="start"><font size="4px">–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥–∞–Ω–Ω–æ–º –±–ª–æ–∫–µ?<br></p>
                                            <ul><font size="3px">
                                            <li>–î–µ—Ç–µ–∫—Ü–∏—è –°–ò–ó –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–≤–µ—Ä–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞);</li>
                                            <li>–ö—Ä–æ–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ bbox –æ—Ç YOLO (–Ω–∏–∂–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞);</li>
                                            <li>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ –°–ò–ó –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∏–∂–µ);</li>
                                            </ul></font>""")
                                predictImageClass = gr.Textbox(label="–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã", placeholder="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–π–ª–∞–º", interactive=False, lines=7)
                                
    with gr.Row(): 
        with gr.Row(): 
            btn2 = gr.Button(value="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã",)
            clr_btn = gr.ClearButton([file_photo, predictImage, cropImage, predictImageClass, ], value="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",)
    
    with gr.Row():
        gr.Markdown("""<p align="center">–í—ã–ø–æ–ª–Ω–∏–ª –õ—É–Ω—è–∫–æ–≤ –ê–ª–µ–∫—Å–µ–π, —Å—Ç—É–¥–µ–Ω—Ç –ò–ö–ë–û-04-21</p>""")

    btn_photo.click(photoProcessing, inputs=[file_photo, ], outputs=[predictImage, cropImage, predictImageClass,])
    btn2.click(fileOpen)
    triggerImage.click(info_fn)

demo.launch(allowed_paths=["/assets/"])